<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="groupBox1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOsAAADbAA4O
        7gUeHfYBIB/3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADM0
        1wAyMuAGNzfOhigospUUFJRVCQmKIwEBngeEc/8ACgnoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAT0/LAFFRziGnp9Lflpax/2Fhi/pAQHThKSlltBcXYHQKCWM6AABzEgAAuAEAAJ4AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wCGhsQAdXXGU8jI1PrCwr//pqal/5WVlf9+foT/Y2Nx/khIYfEvL1bNGRpQlgYI
        TFskDDwp2HAOGPaYGQPrkRwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAdHTNAAAAeACHh8OUt7fS/6+vuP+jo6L/np6b/5eXlv+QkZH/iIiG/395
        dP92Z17/eWBV/LKPeubKhkHSSS07ggADXUEBAGYZAQGFAwAAcQAAAP8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZMAAcXG5FW9vxM8nJ9b/LS7I/0VGtf9iYJ7/gnqF/5eG
        df+mjnb/tJyE/8e1pP/g2M7/+fj3/9G0lv+CXTz/U1Rr9D4+ZtcrK2ijHBxxZg0NhDAFBaEOAADIAQAA
        tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG9xugB5ers+T0/E8wQBwf8WC6b/PSqP/3Jb
        hv+mkpD/v7Kl/8bCvf/MzMz/1dbW/+Tk5f/4+Pn/4tzW/6Z6Sf+Ui3//jI2N/4GBiP9xcYb9YmKP7FZW
        qsZHR9OCJyfoGCoq5gAAAAAAAAAAAAAAAAAAAAAAAAAAAOmQOAC8bBgA62YACJZ7iYB5ZJX/g2yS/62b
        nf/Eu7P/zMnE/8vLy//LzMz/zMzM/8/Pz//X19j/5efo//j6+//u7u7/s5d5/5h7X/+Sk5n/m5uZ/6Gh
        nf+qqqf/t7e8/76+2t+lpe4hqqrrAAAAAAAAAAAAAAAAAAAAAADZcxAA1GwAANZrADvQkVC20sGx8tXN
        xf/V1ND/0tPS/9DQ0P/Pzs//zszN/8nJyv/LzM3/19bW/+Pc0//w2L//+cqY//ewYP/QpnP/iWJT/z44
        nv9TU7L/dXWx/5WVsv+2tr7/29vY8vHx6T/u7ucAAAAAAAAAAAAAAAAAAAAAANJuCADRbwoi0msA0dOh
        bf/d3+H/2dra/9XV1f/S09T/0NDR/63Mv/+Tvqv/pqeY/7uaef/PlFj/2Ycw/+F8Ef/ldwL/6ncA/+GO
        MP+nhGP/NB5y/wYHt/8REcn/IyPY/0JC4/9xcen/c3PshgAA1AUiIt0AAAAAAAAAAAAAAAAAz2sBAM1s
        BmHRbAH+1rCJ/93h5P/a2tr/19HL/86/rf+kwKX/ksuz/2unjf9HdVL/SlQi/19ECP94QQD/i0cA/5lO
        AP+mVgH/tGAH/7SLWP9qSVD/DQqW/wwMuP8SEdT/GBjz/x8f/9UpKfpXKyrgBCcn6QAAAAAAAAAAAAAA
        AADOagEAzmsETtFvBvHYrX//2riV/9GZX/+6fjT/j41P/6fCrf/U1dX/vLq7/5WamP9vgXr/SGZW/zRP
        M/86QBj/VjwI/3dBAv+VTAD/rGsk/5FvUf8qGm3/Cgux/xMS2PUaGvOeIiL/JQAA/QAqKv4AAAAAAAAA
        AAAAAAAAAAAAANlyCgDWbwkG43oKU9l5EsjDZAP9oV4H/4OJU/+vwLb/1NTV/9XV1f+5ubn/pKSk/5yb
        m/+SkpL/f4OC/2Fwav9DXUz/OU8v/01JGP96Twz/mnRE/2BBW/8NC7LWERHYXRsb8QgXF+gAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP83AACtggUA4WUAFpl5JZ2Lm3P/ucO//8/Oz//U1NT/1dLT/7e1
        tv+gnp//mJeX/5OTkv+Qj47/jYyM/4SGiP9wfYP/X3dw/01tU/9Wc0z/bXNT9EtOXlD/WAAAAFyMAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAENJ9AADgPgFWzJxHmca10cPIxv/Lysr/0M3O/8rT
        z/+NzrH/brKU/3ycj/+Ejo//e4WQ/3OEl/9yiqX/gJy7/2yXx/9Qfav/jJCU/4SQi/9vjXz+VY5vzzSV
        bIEZp2o4AcFmDCDUeQEVyHYAAAAAAAAAAAAAAAAAAAAAABz9rABH0JUAMduVRabVwOfOzc3/wsHA/7y+
        vf+dxrj/RrqT/w2jd/8YlX3/QJKS/3Sarv+Tp77/q7rL/8nS2//o6+//5enu/2aNtv9TeqD/k5WX/5ya
        mv+bnJz/j5+Y/32smPBkxpyfLOGVETDclAAAAAAAAAAAAAAAAAAAAAAAEfGMAAD/YQMv2pKls9LL/7W9
        yf+CkqT/cpao/2Cnrf9vp6//lbG9/7O9x//FyM3/z8/Q/9XU1P/b2tn/4+Li/+/v7//19PT/zM7R/2SH
        q/9ZfJ3/lJWW/52am/+koqP/sK+v/7zAvsy/0MkRvc3GAAAAAAAAAAAAAAAAAAAAAAAMpq4AAKOqGiCj
        rtWUt9D/rL7S/7TAzv/DytD/z8/S/9XS0//V09L/09LS/9LR0f/S0tL/1NTU/9nZ2f/h4eH/7e3t//X1
        9f/b2tr/wcPF/2iKrf9Mhpn/b6KN/46nnP+orav/wL2+6c/JyyvNyMoAAAAAAAAAAAAAAAAAD2nPAHlH
        hAAAZtR7J3zX/MvT3P/e3dz/2tnY/9bW1v/U1NT/09PT/9LS0v/S0tL/0tLS/9TU1P/X19f/29vb/+Pj
        4//v7+7/+fj3/+Hf3v/Ozc3/wcLF/2KOrf8Oin3/Gbh1/zvNkP9p2Kr4bdyxX//z/wAo0ZEAAAAAAAAA
        AAALaM4AC2fNHABn1tg3hdn/1tnd/9zc3P/Z2dn/2NjY/9bW1v/W1tb/1tbV/9jX1v/d29r/4uDe/+bk
        4v/p6Oj/6evu/+Pr9P/U5Pb/utDl/8rN0P/NzMr/xcXI/2eUsf8LoozoA+OFmQn5l2Aa86EnN8aXASnb
        mgAAAAAAAAAAAApq0wALatMyAGfX7k6S2//j4+P/5OPh/+Xj4f/n5eP/5uXk/+Hj5f/Z3+f/y9rq/7nU
        7v+gyfH/g7zy/2St8/9HoPT/LZX2/xiM9/8Vjfn/W6vu/7LF0//Pzcz/yczP/4Kv1YEAXeUCGanZAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACGnTAAlp0xkAZtTLYaDi/9Xl8/+/2vL/p8/0/4rD9f9rtfb/Taj3/zKd
        +P8dlPr/DY77/wOL/P8Aif3/AIn+/wCK//8Aiv//AIv//wCL//8BjP//KZ34/4e74f/M0NP/497adtTS
        0gD/9ecAAAAAAAAAAAAAAAAAAAAAAAAAAAAScd4AAHfEAAdt2C46lOtyO6P5nBeW/MIHj/3gAI3+9ACM
        /v4Ajf//AI7//wCQ//8Akf//AJL//wCT//8Ak///AJP//wCS//8AkP//AI3//wCL//8AjP//CpP+/1Cs
        8P+cx+ageL77A12w8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACC/wAAcf8BAZH/CwaV
        /yAFlP8/BJT/ZQOT/44Ck/+2ApT/1wGU/+4BlP/8AJT//wCU//8Akv//AI///wGM//0Bif/3AYj/7wGI
        /+QBiv/YAo7/yQ+Y/ZwSl/whDZf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAtsv4ASsb+ABCe/gcJl/8YBpL/MwSQ/1cEj/+AA4//kgOP/4AEjv9rBI7/VwWQ
        /0QGkP8zB5L/JAmT/xgLk/8OB5T/CBGa/gMLmv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////z////4H///+AH///gAH//4AAP/8AAAP/AAAB/gA
        AAfwAAAH4AAAA+AAAAPgAAAP4AAAH/gAAH/wAAAH8AAAB+AAAAfgAAAH4AAAB8AAAAPAAAAfwAAAP+AA
        AB/4AAAf/+AAH/////////////////////8=
</value>
  </data>
</root>